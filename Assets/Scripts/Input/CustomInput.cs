//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""44415db2-5d43-4030-97fc-49c028718d6e"",
            ""actions"": [
                {
                    ""name"": ""KeyDownC"",
                    ""type"": ""Button"",
                    ""id"": ""346d8477-0633-42fe-afca-039706692f0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyDownX"",
                    ""type"": ""Button"",
                    ""id"": ""e2a69cf0-33ef-4f4b-b43e-ae51628634a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyDownS"",
                    ""type"": ""Button"",
                    ""id"": ""b571de61-ae4b-4690-9bc9-62035da9bf53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyDownZ"",
                    ""type"": ""Button"",
                    ""id"": ""b041f903-1e01-48b2-a6d6-4114e5558e58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyDownD"",
                    ""type"": ""Button"",
                    ""id"": ""d85594f0-29e2-42fc-92ba-48e42b21484f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""741a09d2-a2dc-4f0c-af7d-7cf499aaabef"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyDownC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0892f150-8fea-48ff-9293-517864a17eaa"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyDownX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fa22ec4-611c-4165-8670-3ed942f085cf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyDownS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af421055-4306-46dd-84e0-58fba1b0b067"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyDownZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fda88048-48b4-43bb-91df-85cd1f7fd37a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyDownD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_KeyDownC = m_Main.FindAction("KeyDownC", throwIfNotFound: true);
        m_Main_KeyDownX = m_Main.FindAction("KeyDownX", throwIfNotFound: true);
        m_Main_KeyDownS = m_Main.FindAction("KeyDownS", throwIfNotFound: true);
        m_Main_KeyDownZ = m_Main.FindAction("KeyDownZ", throwIfNotFound: true);
        m_Main_KeyDownD = m_Main.FindAction("KeyDownD", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_KeyDownC;
    private readonly InputAction m_Main_KeyDownX;
    private readonly InputAction m_Main_KeyDownS;
    private readonly InputAction m_Main_KeyDownZ;
    private readonly InputAction m_Main_KeyDownD;
    public struct MainActions
    {
        private @CustomInput m_Wrapper;
        public MainActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyDownC => m_Wrapper.m_Main_KeyDownC;
        public InputAction @KeyDownX => m_Wrapper.m_Main_KeyDownX;
        public InputAction @KeyDownS => m_Wrapper.m_Main_KeyDownS;
        public InputAction @KeyDownZ => m_Wrapper.m_Main_KeyDownZ;
        public InputAction @KeyDownD => m_Wrapper.m_Main_KeyDownD;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @KeyDownC.started -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownC;
                @KeyDownC.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownC;
                @KeyDownC.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownC;
                @KeyDownX.started -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownX;
                @KeyDownX.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownX;
                @KeyDownX.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownX;
                @KeyDownS.started -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownS;
                @KeyDownS.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownS;
                @KeyDownS.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownS;
                @KeyDownZ.started -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownZ;
                @KeyDownZ.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownZ;
                @KeyDownZ.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownZ;
                @KeyDownD.started -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownD;
                @KeyDownD.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownD;
                @KeyDownD.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnKeyDownD;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @KeyDownC.started += instance.OnKeyDownC;
                @KeyDownC.performed += instance.OnKeyDownC;
                @KeyDownC.canceled += instance.OnKeyDownC;
                @KeyDownX.started += instance.OnKeyDownX;
                @KeyDownX.performed += instance.OnKeyDownX;
                @KeyDownX.canceled += instance.OnKeyDownX;
                @KeyDownS.started += instance.OnKeyDownS;
                @KeyDownS.performed += instance.OnKeyDownS;
                @KeyDownS.canceled += instance.OnKeyDownS;
                @KeyDownZ.started += instance.OnKeyDownZ;
                @KeyDownZ.performed += instance.OnKeyDownZ;
                @KeyDownZ.canceled += instance.OnKeyDownZ;
                @KeyDownD.started += instance.OnKeyDownD;
                @KeyDownD.performed += instance.OnKeyDownD;
                @KeyDownD.canceled += instance.OnKeyDownD;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnKeyDownC(InputAction.CallbackContext context);
        void OnKeyDownX(InputAction.CallbackContext context);
        void OnKeyDownS(InputAction.CallbackContext context);
        void OnKeyDownZ(InputAction.CallbackContext context);
        void OnKeyDownD(InputAction.CallbackContext context);
    }
}
